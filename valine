#!/bin/bash
# valine v0.2.1 last mod 2014/07/18
# Latest version at <https://github.com/ryran/b19scripts>
# Copyright 2014 Ryan Sawhill <rsaw@redhat.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#    General Public License <gnu.org/licenses/gpl.html> for more details.
#
#-------------------------------------------------------------------------------

# Program name
pzero=valine

# Get version from line #2
version=$(sed '2q;d' ${0})

# Colors
B='\033[1;1m'  # bold
R='\033[0;0m'  # reset

# Some global variables
skipPrompts=false
allDomains=false
startDomains=true
declare -i numTimesTrapTriggered=0
# GNU getopt short and long options
sOpts='ah'
lOpts='all,off,help'

Print() {
    echo -e "${B}${@}${R}"
}

Prompt() {
    local REPLY
    if [[ ${skipPrompts} == true ]]; then
        echo "${@} [y/n] y"
    else
        read -p "${@} [y/n] "
        [[ ${REPLY} == y ]]
        return
    fi
}

wait_for_domid_turn_to_dash() {
    local -i count
    [[ ${parallelize} == false ]] && printProgress="printf ."
    until [[ $(virsh domid ${1}) == - ]]; do
        count+=1
        sleep .5
        ${printProgress}
        case ${count} in
            8)   echo; echo -e "      ${Domain}: Waiting for domain to turn off" ;;
            30)  echo; echo -e "      ${Domain}: Domain has not yet turned off (still waiting)" ;;
            120) echo; echo -e "      ${Domain}: Domain has not yet turned off\n        Consider manual intervention on the domain's serial or physical console" ;;
            340) echo; echo -e "      ${Domain}: Domain still has not turned off\n        Manual intervention on the console is probably required\n        No more warnings will be printed" ;;
        esac
    done
}

wait_for_shutdown() {
    if [[ ${parallelize} == true ]]; then
        virsh shutdown ${1} &>/dev/null
        wait_for_domid_turn_to_dash ${1}
    else
        echo "  Shutting down domain"
        virsh shutdown ${1} &>/dev/null
        printf "    Waiting for domain to shut down gracefully ..."
        wait_for_domid_turn_to_dash ${1}
    fi
    echo
}

wait_for_destroy() {
    if [[ ${parallelize} == true ]]; then
        virsh destroy ${1} &>/dev/null
        wait_for_domid_turn_to_dash ${1}
    else
        echo "  Forcefully terminating domain"
        virsh destroy ${1} &>/dev/null
        printf "    Waiting for domain to terminate ..."
        wait_for_domid_turn_to_dash ${1}
    fi
    echo
}

show_usage() {
    echo -e "${B}Usage: ${pzero}
       ${pzero} DOMAIN
       ${pzero} DOMAIN {list|new|revert}
       ${pzero} DOMAIN {revert|Delete} SNAPSHOT_NAME
       ${pzero} DOMAIN {start|shutdown|destroy|console}
       ${pzero} --all {new|revert|start|shutdown|destroy}${R}"
}

show_help() {
    show_usage
    echo -e "
Simple img-file snapshot-mgmt with intelligent BASH tab-completion

${B}With no arguments:${R}
 ┐
 │${B}${pzero}${R} by itself displays summary of all domains & their snapshots
 └──────────────────────────────────────────────────────────────────────────────

${B}Snapshotting with ${pzero}:${R}
 ┐
 │${B}${pzero} DOMAIN [--off]${R}                                       (YES confirmation)
 │    if DOMAIN has zero snapshots, runs:  ${pzero} DOMAIN new
 │    if DOMAIN has any snapshots, runs:   ${pzero} DOMAIN revert
 │
 │${B}${pzero} DOMAIN {list|l}${R}
 │    runs:
 │          virsh snapshot-list DOMAIN --parent
 │
 │${B}${pzero} DOMAIN {new|n} [--off]${R}                               (NO confirmation)
 │    runs:
 │          virsh shutdown DOMAIN                             (and waits)
 │          virsh snapshot-create DOMAIN
 │          virsh start DOMAIN                                (except w/ --off)
 │
 │${B}${pzero} DOMAIN {revert|r} [--off]${R}                            (NO confirmation)
 │    runs:
 │          virsh destroy DOMAIN
 │          virsh snapshot-revert DOMAIN --current
 │          virsh start DOMAIN                                (except w/ --off)
 │
 │${B}${pzero} DOMAIN {revert|r} SNAPSHOT_NAME [--off]${R}              (NO confirmation)
 │    runs:
 │          virsh destroy DOMAIN
 │          virsh snapshot-revert DOMAIN SNAPSHOT_NAME
 │          virsh start DOMAIN                                (except w/ --off)
 │
 │${B}${pzero} DOMAIN {Delete|D} SNAPSHOT_NAME${R}                      (YES confirmation)
 │    runs:
 │          virsh snapshot-delete DOMAIN SNAPSHOT_NAME
 │
 │For more on managing snapshots:
 │    Virtualization Deployment & Administration Guide @ http://red.ht/1kwfbJs 
 └──────────────────────────────────────────────────────────────────────────────

${B}Starting/stopping/accessing domains with ${pzero}:${R}
 ┐
 │${B}${pzero} DOMAIN {start|s} | {shutdown|h} | {destroy|d} | {console|c}${R}
 │
 │start, shutdown, destroy, console commands are available as a convenience due
 │to virsh's lack of intelligent BASH tab-completion
 └──────────────────────────────────────────────────────────────────────────────

${B}Managing ALL domains at once with ${pzero}:${R}
 ┐  
 │${B}${pzero} --all [ {new|n} | {revert|r} | {start|s} | {shutdown|h} | {destroy|d} ]${R}
 │
 │Replace DOMAIN with '--all' (or '-a') to operate on all detected domains in
 │parallel (jobs are backgrounded, verbose output is lessened, and cancelling
 │requires double Ctrl-c)
 │Does not work with {console|c} or {Delete|D}
 │The --off switch is optional with {new|n} | {revert|r}
 │Omitting command (e.g., {new|n} is OK (with or without --off) and leads to
 │same behavior described for ${B}${pzero} DOMAIN${R}
 └──────────────────────────────────────────────────────────────────────────────
 
${B}Version info: ${version:2}${R}
  See <http://github.com/ryran/b19scripts> to report bugs or suggestions"
}

list_virts_and_snapshots() {
    {
        echo -e "❚❚\n DOMAIN❚STATE❚SNAPSHOTS\n❚❚"
        for dom in $(virsh list --name); do
            echo " $dom   ❚running   ❚$(virsh snapshot-list $dom --tree | sed -e '/^ *$/d' -e 1\!s/^/❚❚/)"
        done
        for dom in $(virsh list --inactive --name); do
            echo " $dom   ❚shut off   ❚$(virsh snapshot-list $dom --tree | sed -e /^$/d -e 1\!s/^/❚❚/)"
        done
        echo "❚❚"
    } |
        column -t -s "❚" -o " │ " |
            sed -e '/|/d' -e 's/+-/\\_/' \
                -e '1 s/│/┬/g' -e '1 s/ /─/g' -e '1 s/$/─────────────────────/' \
                -e '3 s/│/┼/g' -e '3 s/ /─/g' -e '3 s/$/─────────────────────/' \
                -e '$ s/│/┴/g' -e '$ s/ /─/g' -e '$ s/$/─────────────────────/'
}

new_snap() {
    Print "${Domain}: Must be shut down in order to create new snapshot"
    wait_for_shutdown ${Domain}
    Print "${Domain}: Creating new snapshot and tagging it as current"
    [[ ${parallelize} == false ]] && printf "  "
    virsh snapshot-create ${Domain}
    if [[ ${startDomains} == true ]]; then
        Print "${Domain}: Starting with pristine snapshot"
        [[ ${parallelize} == false ]] && printf "  "
        virsh start ${Domain}
    fi
}

revert_snap() {
    if [[ -n ${1} ]]; then
        Print "${Domain}: Must be off to revert to old snapshot"
        wait_for_destroy ${Domain}
        Print "${Domain}: Reverting to snapshot ${1}"
        virsh snapshot-revert ${Domain} "${1}"
    else
        Print "${Domain}: Must be off to revert to snapshot"
        wait_for_destroy ${Domain}
        Print "${Domain}: Reverting to current snapshot"
        virsh snapshot-revert ${Domain} --current
    fi
    if [[ ${startDomains} == true ]]; then
        Print "${Domain}: Starting with pristine snapshot"
        [[ ${parallelize} == false ]] && printf "  "
        virsh start ${Domain}
    fi
}

delete_snap() {
    Print "About to remove snapshot ${1} from domain ${Domain}"
    Prompt "  Continue?" \
        && virsh snapshot-delete ${Domain} "${1}"
}

case_thru_args() {
    case ${1} in
        -bg)  parallelize=true ;;
          *)  parallelize=false ;;
    esac
    shift
    if [[ -z ${1} ]]; then
        if [[ -n $(virsh snapshot-list "${Domain}" --name) ]]; then
            Print "Default behavior would revert domain ${Domain} to its current snapshot"
            Prompt "  Continue?" \
                && revert_snap
        else
            Print "Default behavior would create a new snapshot of domain ${Domain}"
            Prompt "  Continue?" \
                && new_snap
        fi
    else
        case "${1}" in
            list|l)
                virsh snapshot-list "${Domain}" --parent
                ;;
            new|n)
                new_snap
                ;;
            revert|r)
                revert_snap "${2}"
                ;;
            Delete|D)
                delete_snap "${2}"
                ;;
            start|s)
                virsh start "${Domain}"
                ;;
            shutdown|h)
                virsh shutdown "${Domain}"
                ;;
            destroy|d)
                virsh destroy "${Domain}"
                ;;
            console|c)
                exec virsh console "${Domain}"
                ;;
            *)
                Print "Error: improper argument '${1}'"
                echo
                show_usage
                exit 64
        esac
    fi
}

cleanup_bg_jobs() {
    numTimesTrapTriggered+=1
    if [[ ${numTimesTrapTriggered} -eq 1 ]]; then
        echo
        Print "${pzero}: Background jobs still running"
        echo "  Hit Ctrl-c again to cancel all bg jobs & quit"
        sleep 1d
    else
        echo
        Print "${pzero}: Aborting background jobs"
        pkill --pgroup 0
    fi

}

sanity_check_args() {
    if [[ ${UID} != 0 ]]; then
        Print "Error: Need root privileges for 'virsh' commands"
        exit 77
    elif [[ ${allDomains} == true ]]; then
        case "${1}" in
            console|c)
                Print "Error: 'console' command not compatible with --all"
                exit 64
                ;;
            Delete|D)
                Print "Error: 'delete' command not compatible with --all"
                exit 64
                ;;
            list|l)
                list_virts_and_snapshots
                exit
                ;;
            revert|r)
                if [[ -n ${2} ]]; then
                    Print "Error: specifying snapshot name with 'revert' command not allowed with --all"
                    exit 64
                fi
                ;;
            new|n|start|s|shutdown|h|destroy|d)
                :
                ;;
            *)
                if [[ -n ${1} ]]; then
                    Print "Error: improper argument '${1}'"
                    echo
                    show_usage
                    exit 64
                fi
        esac
    elif [[ -z ${1} ]]; then
        show_usage
        echo
        list_virts_and_snapshots
        exit
    elif ! virsh list --all --name | grep -q "^${1}$"; then
        Print "Error: DOMAIN '${1}' not recognized"
        echo "Available domains:"
        virsh list --all --name | sed -e /^$/d -e 's/^/  • /' 
        exit 64
    elif [[ ${2} == revert || ${2} == r || ${2} == Delete || ${2} == D ]]; then
        if [[ -n ${3} ]]; then
            if ! virsh snapshot-list "${1}" --name | grep -q "^${3}"; then
                Print "Error: Invalid snapshot name '${3}'"
                echo "Available snapshots for domain ${1}:"
                virsh snapshot-list "${1}" --parent
                exit 64
            fi
        elif [[ ${2} == Delete || ${2} == D ]]; then
            Print "Error: Must specify snapshot name to delete"
            exit 64
        fi
    elif [[ -n ${3} ]]; then
        Print "Error: improper argument '${3}'"
        echo
        show_usage
        exit 64
    fi
}

main() {
    # Parse the cmdline
    until [[ ${1} == -- ]]; do
        case "${1}" in
            --all|-a)
                shift; allDomains=true ;;
            --off)
                shift; startDomains=false ;;
            --help|-h)
                shift; show_help; exit ;;
        esac
    done
    shift  # (to get rid of the '--')
    sanity_check_args "${@}"
    # Make shit happen
    if [[ ${allDomains} == true ]]; then
        # If run with --all/-a:
        if [[ -z ${1} ]]; then
            # If executed as: "$0 --all" (with or without --off) ...
            # Then: walk through interactive prompts in the foreground
            for Domain in $(virsh list --all --name); do
                case_thru_args -fg
            done
        else
            # If executed as: "$0 --all {new|revert|start|shutdown|destroy}" (with or without --off) ...
            # Then: kick off jobs in pseudo-parallel
            trap cleanup_bg_jobs 2
            for Domain in $(virsh list --all --name); do
                case_thru_args -bg "${@}" &
            done
            wait
            trap 2
        fi
    else
        Domain=${1}
        shift
        # If NOT run with --all/-a:
        case_thru_args -fg "${@}"
    fi

}

# Check for bad '-' or '--' options
getopt -Q --name=${pzero} -o ${sOpts} -l ${lOpts} -- "${@}" || { show_usage; exit 64; }

# Main thread
main $(getopt -u --name=${pzero} -o ${sOpts} -l ${lOpts} -- "${@}")
