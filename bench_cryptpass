#!/bin/bash
# Copyright 2015 Ryan Sawhill Aroha <rsaw@redhat.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#    General Public License <gnu.org/licenses/gpl.html> for more details.
#-------------------------------------------------------------------------------

if [[ ${1} == -h || ${1} == --help ]]; then
    cat <<EOF
Usage: ${0##*/} <ROUNDS>|--no-set-rounds
Benchmark sha/bcrypt hashing by utilizing with the passwd command

This script looks for a 'rounds_user' shell environment variable
Set that first via 'export rounds_user=SomeUserName'
If \$rounds_user is a valid user and we're running as root, the option
    'rounds=<ROUNDS>' is set in /etc/pam.d/system-auth
If '--no-set-rounds' is passed as the sole argument (instead of a number),
    then no attempt to change system-wide settings (system-auth) will be made
After that, the 'time' command is used to benchmark how long it takes to
    reset the password for \$rounds_user with the 'passwd --stdin' command
EOF
    exit 0
elif [[ ${EUID} -ne 0 ]]; then
    printf "You must run this script as root\nSee --help\n"
    exit 4
elif [[ -z ${rounds_user} ]]; then
    printf "You must run 'export rounds_user=USERNAME' first\nSee --help\n"
    exit 3
elif ! id ${rounds_user} >/dev/null; then
    printf "You must run 'useradd ${rounds_user}' first\nSee --help\n"
    exit 2
elif [[ ${1} == --no-set-rounds ]]; then
    num_rounds=
elif [[ ${#} -eq 0 ]] || ! grep -qs '^[0-9]\+$' <<<"${1}"; then
    printf "You must specify a single number arg (1000 - 9999999) or '--no-set-rounds'\nSee --help\n"
    exit 1
else
    num_rounds=${1}
fi

if [[ -n ${num_rounds} ]]; then
    printf "Setting system-wide 'rounds=${num_rounds}' in /etc/pam.d/system-auth ...\n"
    sed --follow-symlinks -ri "/^password\s+sufficient\s+pam_unix.so/s, rounds=[0-9]+|$, rounds=${num_rounds},"  /etc/pam.d/system-auth
    grep -EHn --color '^password\s+sufficient\s+pam_unix.so' /etc/pam.d/system-auth
    printf "... Done.\n\n"
else
    printf "Skipping modification of rounds in system-auth\n"
    printf "You should make relevant modifications manually before running ${0##*/}\n\n"
fi

[[ -n ${rounds_pass} ]] || rounds_pass="St@nda7dsizePa55"

printf "Clearing user password of '${rounds_user}' ...\n"
usermod -p '' ${rounds_user}
printf "Timing password change (newpass: '${rounds_pass}') ...\n"
time passwd --stdin "${rounds_user}" <<<"${rounds_pass}" &>/dev/null
printf "\n"

gawk -F$ -v user="${rounds_user}" '
{
if ($1 ~ user) {
    hashtype = $2
    if (hashtype == 1) {
        printf "Hash type for user %s is MD5\n", user
        printf "The rounds= setting does not affect MD5\n"
        printf "Try: authconfig --passalgo=sha512 --update\n"
        printf " Or: sed --follow-symlinks -ri /^password\\s+sufficient\\s+pam_unix.so/s,\\ md5,\\ sha512, /etc/pam.d/system-auth\n"
        exit 9
        }
    else if (hashtype ~ /^2/) {
        printf "Note that hash type for user %s is brypt\n", user
        rounds = $3
        hash = substr($4, 0, 5)"..."
        shadowstr = $1 "$" $2 "$" $3 "$" hash
        }
    else if ($3 ~ /rounds=/) {
        rounds = gensub(/rounds=(.*)/, "\\1", 1, $3)
        hash = substr($4, 0, 5) "..."
        shadowstr = $1 "$" $2 "$" $3 "$" hash
        }
    else {
        rounds = 5000
        hash = substr($3, 0, 5) "..."
        shadowstr = $1 "$" $2 "$" hash
        }
    printf "From /etc/shadow: %s  (%'"'"'d)\n\n", shadowstr, rounds
    }
}' /etc/shadow || exit

if command -v sshpass >/dev/null; then
    export SSHPASS=${rounds_pass}
    printf "Timing ssh into localhost (using sshpass command) ...\n"
    printf "This will fail if ssh is not listening on the default port\n"
    time sshpass -e ssh ${rounds_user}@localhost x=
else
    printf "If you install the 'sshpass' command (Fedora/EPEL: sshpass) this script will\nalso time ssh login as ${rounds_user}@localhost for you\n"
fi
printf -- "-----------------------------------------------------------------------\n\n"
