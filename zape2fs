#!/bin/bash
# zape2fs v0.1.3 last mod 2013/10/22
# Latest version at <http://github.com/ryran/b19scripts>
# Copyright 2013 Ryan Sawhill Aroha <rsaw@redhat.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#    General Public License <gnu.org/licenses/gpl.html> for more details.
#-------------------------------------------------------------------------------


pzero=${0##*/}  # Appname
version=$(sed '2q;d' $0)  # Version from line 2

show_help() {
  echo "Usage: $pzero [-Y|--bypass] [-t|--test] -a|--all|DEVICE...
Quickly render data on ext filesystems virtually irrecoverable

Upon execution, $pzero will print back the names of selected devices and a
warning prompt will require confirmation to initiate wiping them

Options:

  -a, --all  blkid will be used to detect and select all ext[234] filesystems
             Otherwise, devices must be specified manually

  -Y, --bypass  Warning prompt will be skipped and no warning or chance to
                review selected devices and abort will be given

  -t, --test  After wiping everything including all superblocks, each
              superblock will be tested with dumpe2fs to ensure proper wiping

Note: To run $pzero successfully, root access will of course be required
      dumpe2fs is used to detect the block locations of inode/block bitmaps,
      inode tables, and superblocks; dd is then used to overwrite those
      locations with zeros or random data

YOU USE THIS SOFTWARE AT YOUR OWN RISK

Version info: ${version:2}
See <github.com/ryran/b19scripts> to report bugs or suggestions"
  exit
}

autodetect_all_ext_devs() {
  for n in 2 3 4; do
    blkid -t TYPE=ext$n -o device
  done
}

test_dev_contains_extfs() {
  local blkidOutput TYPE
  if blkidOutput=$($blkid -o export $1); then
    eval $blkidOutput
    echo "------------------------------------------------------"
    echo -e "$1 contains $TYPE filesystem\n"
    if [[ ${TYPE%?} == ext ]] && $dumpe2fs -h $1 &>/dev/null; then
      :
    else
      echo "Choose a device that contains an ext[234] filesystem"
      exit
    fi
  else
    echo "$1 does not contain a recognizable filesystem"
    exit
  fi
}

dumpe2fs_command() {
  $cat $dumpe2fs_output_file
}

get_block_size() {
  dumpe2fs_command | $awk '/Block size:/ {print $3; exit}'
}

get_block_bitmaps() {
  dumpe2fs_command | $awk '/Block bitmap at/ { print gensub(/.* Block bitmap at ([0-9]+) .*/, "\\1", 1) }' 
}

get_inode_bitmaps() {
  dumpe2fs_command | $awk '/Inode bitmap at/ { print gensub(/.* Inode bitmap at ([0-9]+) .*/, "\\1", 1) }' 
}

get_inode_tables() {
  dumpe2fs_command | $awk '/Inode table at/ { print gensub(/.* Inode table at ([0-9]+)-([0-9]+) .*/, "\\1 \\2", 1) }'
}

get_superblocks() {
  dumpe2fs_command | $awk '/superblock/ { print gensub(/.* superblock at ([0-9]+), .*/, "\\1", 1) }'
}

wipe_blocks() {
  local device=$1 ; shift
  printf "    "
  for block in $@; do
    printf "$block "
    $dd if=/dev/urandom bs=$(get_block_size $device) count=1 seek=$block of=$device &>/dev/null
  done
  echo -e "\n"
}

wipe_inode_tables() {
  local device=$1 ; shift
  printf "    "
  while read line; do
    start=$($cut -d ' ' -f1 <<<"$line")
    end=$($cut -d ' ' -f2 <<<"$line")
    count=$(( $end - $start + 1 ))
    printf "$start-$end "
    $dd if=/dev/zero bs=$(get_block_size $device) count=$count seek=$start of=$device &>/dev/null
  done <<<"$(get_inode_tables $device)"
  echo -e "\n"
}

check_superblocks() {
  local device=$1 ; shift
  for block in $@; do
    printf "    $block:❚"
    if $dumpe2fs -o superblock=$block $device &>/dev/null; then
       echo "✖  Superblock appears intact! Check manually: 'dumpe2fs -o superblock=$block $device'"
    else
       echo "✔  Invalid filesystem superblock"
    fi
  done | $column -ts❚
  echo
}

parse_positional_params() {
  unset doAutodetect bypassWarning doSuperblockTest
  until [[ $1 == -- ]]; do
    case $1 in
      -a|--all)     doAutodetect=y
    ;;
      -h|--help)    show_help
    ;;
      -Y|--bypass)  bypassWarning=y
    ;;
      -t|--test)    doSuperblockTest=y
    esac
    shift
  done
  shift
  deviceList=$@
}

# Set TMPDIR env variable so bash can do its thing even if /tmp is inaccessible
export TMPDIR=/dev/shm

# getopt options
shortOpts="ahYt"
longOpts="all,help,bypass,test"

# Check for bad args
getopt -Q --name=$pzero -o $shortOpts -l $longOpts -- "$@" || show_help

# Parse args proper-like and set variables appropriately
parse_positional_params $(getopt -u --name=$pzero -o $shortOpts -l $longOpts -- "$@")

# Do autodetection if requested
if [[ $doAutodetect == y ]]; then
  deviceList=$(autodetect_all_ext_devs)
  if [[ -n $deviceList ]]; then
    echo "Auto-detected ext filesystem(s) on the following device(s):"
    fold -sw $(($(tput cols)-3)) <<<$deviceList | sed 's/^/  /'
  else
    echo "Unable to auto-detect any ext filesystems"
    exit 1
  fi

# Otherwise print about specified devices:
elif [[ -n $deviceList ]]; then
  echo "Device(s) specified on command-line:"
  fold -sw $(($(tput cols)-3)) <<<$deviceList | sed 's/^/  /'

# If no autodetect or no devices specified:
elif [[ -z $deviceList ]]; then
  echo "No devices specified; use -a to auto-detect all devices or -h for help"
  exit 1
fi

echo

# Force prompt to continue
if [[ $bypassWarning != y ]]; then
  echo "CAUTION WARNING DANGER!!"
  echo "About to irrevocably damage filesystem(s) on the above-mentioned device(s)"
  echo "This is your only warning; Type uppercase YES to confirm and initiate wiping"
  read -ep "> "
  [[ $REPLY == YES ]] || { echo "Aborting"; exit; }
  echo
fi

# Create sub tempdir in /dev/shm
export TMPDIR=$(mktemp -d --tmpdir=/dev/shm)

# Tempfile for dumpe2fs output
dumpe2fs_output_file=$TMPDIR/dumpe2fs_output

# Check to see if we'll be wiping any fs containing crucial commands
crucialCommands="blkid cat cut rm dumpe2fs column dd awk"
for devpath in $(df $(type -P $crucialCommands) | awk '/^\/dev/ {print $1}' | sort -u); do
  UUID=$(blkid -o export $devpath | awk -F= '/UUID=/ {print $2}')
  for dev in $deviceList; do
    if blkid -t UUID=$UUID $dev &>/dev/null; then
      saveCommands=yes
      break 2
    fi
  done
done

# If wiping fs containing commands we need, copy them to TMPDIR
# From testing, this is often unnecessary, but better to avoid the fringe cases
for cmd in $crucialCommands; do
  if [[ $saveCommands == yes ]]; then  
    cp -a $(type -P $cmd) $TMPDIR 2>/dev/null
    eval $cmd=$TMPDIR/$cmd
  else
    eval $cmd=$cmd
  fi
done

# Delete tempdir
trap "$rm -rf $TMPDIR 2>/dev/null" EXIT

# FINALLY, iterate over devices
for dev in $deviceList; do
  
  # Make sure device is ext
  test_dev_contains_extfs $dev
  
  >$dumpe2fs_output_file
  $dumpe2fs $dev 2>/dev/null >$dumpe2fs_output_file
  
  echo "  Wiping block bitmaps at block numbers..."
  wipe_blocks $dev $(get_block_bitmaps $dev)
  
  echo "  Wiping inode bitmaps at block numbers..."
  wipe_blocks $dev $(get_inode_bitmaps $dev)
  
  echo "  Wiping inode tables at block number ranges..."
  wipe_inode_tables $dev
  
  echo "  Wiping primary and backup superblocks at block numbers..."
  superblockList=$(get_superblocks $dev)
  wipe_blocks $dev $superblockList
  
  echo -e "  Wipe finished\n"
  
  if [[ $doSuperblockTest == y ]]; then
    echo "  Confirming all superblocks wiped..."
    check_superblocks $dev $superblockList
  fi
  
done

