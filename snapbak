#!/bin/bash
# snapbak v0.2.3 last mod 2013/10/29
# Latest version at <http://github.com/ryran/b19scripts>
# Copyright 2013 Ryan Sawhill <rsaw@redhat.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#    General Public License <gnu.org/licenses/gpl.html> for more details.
#
#-------------------------------------------------------------------------------

# Program name
pzero=snapbak

# Get version from line #2
version=$(sed '2q;d' $0)

# Default COW size, overridden by cmdline-opts
SnapshotCOWSize=3G

# No default sourcedev name
StorageDeviceLV=

# Colors
B='\033[1;1m'  # bold
R='\033[0;0m'  # reset

Wait_Shutdown() {
  # Shutdown guest passed as first argument
  echo -e "\nShutting down guest '$1' ..."
  virsh shutdown $1 &>/dev/null
  until [[ $(virsh domid $1) == - ]]; do
    echo "Waiting for guest to shut down gracefully ..."
    sleep 2
  done
}

Wait_Destroy() {
  # Destroy guest passed as first argument
  echo -e "\nForcefully terminating guest '$1' ..."
  virsh destroy $1 &>/dev/null
  until [[ $(virsh domid $1) == - ]]; do
    echo "Waiting for guest to terminate ..."
    sleep 2
    virsh destroy $1 &>/dev/null
  done
}

Remove_Snapshot() {
  # Remove snapshot storage (passed as first argument) if it already exists
  if [[ -e $1 ]]; then
    echo -e "\nRemoving snapshot logical volume '$1' ..."
    lvremove -f $1
    while [[ -e $1 ]]; do
      echo "Waiting for snapshot removal ..."
      (sleep 2; echo y) | lvremove $1
      sleep 3
    done
  fi
}

Print() {
  printf "${B}";  fold -sw $(($(tput cols)-5)) <<<"$@" | sed '1!s/^/  /';  printf "${R}"
}

Prompt() {
  local REPLY
  if [[ $SkipPrompts == true ]]; then
    echo "$@ y"
  else
    read -p "$@ "
    [[ $REPLY != y ]] && { echo Aborting; exit; }
  fi
}


# Help page
Help_Usage() {
  echo -e "Usage: ${B}$pzero [OPTIONS] <VirtGuestName>${R}
Ideally, run against a KVM guest that has LVM logical volumes for storage

${B}VirtGuestName${R} must be one of the names returned by ${B}virsh list --all${R}

$pzero will abort if a guest's primary (first) storage is a block device but
not a logical volume; otherwise it will auto-detect whether the logical volume
is a snapshot

 • If guest is using an LV snapshot for storage, $pzero can recreate a fresh
   snapshot from the origin (and reset the guest) OR, if using the ${B}--merge${R}
   option, the guest will be shutdown and the current snapshot will be merged
   into the origin (after which point a new snapshot will be taken and the
   guest will be reset)
   
 • If guest is using a non-snapshot LV for storage, $pzero offers to shutdown
   the guest, snapshot the original LV, and then reconfigure the guest to use
   the new snapshot as its storage

If a guest's primary storage is an image file, $pzero offers to create a new
logical volume for the guest to use in place of said image file

 • If this succeeds, $pzero will transfer data from the image file directly
   on to the new LV and modify the guest to use the new LV
   After that, $pzero will treat the guest as any other guest using a
   non-snapshot LV for storage -- namely, it will offer to snapshot the
   original LV and finally reconfigure the guest to use THAT new snapshot
   
${B}OPTIONS:${R}

  ${B}-y${R}, ${B}--yes${R}
      Use this option to skip confirmation prompts, when possible
      
  ${B}-d${R}, ${B}--dev${R}=<StorageDeviceLV>
      Use this option to be explicit about which block device to focus on
      Without this option, $pzero works with the first device that the
      guest has as storage, i.e., whatever is returned by the command:
          ${B}virsh dumpxml VirtGuestName|grep source.dev|head -1${R}

  ${B}-L${R}, ${B}--size${R}=<SnapshotLogicalVolumeSize[bBsSkKmMgGtTpPeE]>
      The snapshot size defaults to 3 GiB; use this option to change that

  ${B}-m${R}, ${B}--merge${R}
      Use this option to have ${B}lvconvert${R} merge a guest's snapshot back into
      the origin logical volume (aborts if guest is not already using snapshot)

  ${B}-r${R}, ${B}--revert${R}
      Use this option to destroy a guest's snapshot and revert it back to using
      the origin logical volume (aborts if guest is not already using snapshot)

Version info: ${version:2}
See <http://github.com/ryran/b19scripts> to report bugs or suggestions"
}

# Declare getopt short and long options
sopts='yd:L:mrh'
lopts='yes,dev:,size:,merge,revert,help'

# Check for bad switches
getopt -Q --name=$pzero -o $sopts -l $lopts -- "$@" || { Help_Usage; exit 64; }

# Parse command-line arguments
PARSE() {
  until [[ $1 = -- ]]; do
    case $1 in
      -y|--yes)    SkipPrompts=true;    shift 1 ;;
      -d|--dev)    StorageDeviceLV=$2;  shift 2 ;;
      -L|--size)   SnapshotCOWSize=$2;  shift 2 ;;
      -m|--merge)  MergeSnapshot=true;  shift 1 ;;
      -r|--revert) RevertToOrigin=true; shift 1 ;;
      -h|--help)   Help_Usage; exit
    esac
  done
  shift  # (to get rid of the '--')
  VirtGuestName=$1
}

# Call the parser
PARSE $(getopt -u --name=$pzero -o $sopts -l $lopts -- "$@")


# Sanity checking
if [[ -z $VirtGuestName ]]; then
  # Quit if no args / not given name of a guest
  Print "Error: VirtGuestName required"
  echo
  Help_Usage
  exit 64
elif [[ $UID != 0 ]]; then
  # Quit if not root
  Print "Error: Need root privileges for 'virsh' and 'lvm' commands"
  exit 77
elif ! virsh list --all --name | grep -q "^${VirtGuestName}$"; then
  # Quit if improper guest name
  Print "Error: VirtGuestName '$VirtGuestName' not recognized"
  echo "Available guests:"
  virsh list --all --name | sed -e /^$/d -e 's/^/  • /' 
  exit 64
fi


# Create a temp-file for the guest definition
XML=$(mktemp); trap "rm $XML" EXIT; chcon -t virt_etc_rw_t $XML

# Save guest definition to temp-file
virsh dumpxml $VirtGuestName >$XML

# Detect source logical volume
if [[ -n $StorageDeviceLV ]]; then
  # If blockdev name was explicitly specified, look for that or that"-snap"
  CurrentStorageDisk=$(egrep "source dev='${StorageDeviceLV}(-snap)?'" $XML | awk -F\' 'NR<2 {print $2}')  # return only 1st result
  if [[ -z $CurrentStorageDisk ]]; then
    # Quit if requested logical volume not found
    Print "Error: Specified storage device '$StorageDeviceLV' not found as storage for guest '$VirtGuestName'"
    exit 66
  fi
  
else
  # Not explicitly specified, so let's do auto-detection
  CurrentStorageDisk=$(grep "source dev=" $XML | awk -F\' 'NR<2 {print $2}')  # return only 1st result
  if [[ -z $CurrentStorageDisk ]]; then
    # If no source devs found, check for image files
    CurrentStorageFile=$(grep "source file=" $XML | awk -F\' 'NR<2 {print $2}')  # return only 1st result
    if [[ -z $CurrentStorageFile || ${CurrentStorageFile,,} =~ \.iso$ ]]; then
      # Quit if no source devs or files found (or if only iso files found)
      Print "Error: Unable to autodetect storage for guest '$VirtGuestName'"
      exit 70
    fi
  fi
fi


# If detected a storage device ...
if [[ -n $CurrentStorageDisk ]]; then
  # Is detected storage device a logical volume?
  if lvs "$CurrentStorageDisk" >/dev/null; then
    # If yes, let's move on
    CurrentStorage=$CurrentStorageDisk
  else
    # If no, abort
    Print "Error: detected storage device '$CurrentStorageDisk' for guest '$VirtGuestName' is not an LVM logical volume ($pzero only works with guests whose storage is a logical volume or an image file)"
    echo Aborting
    exit 65
  fi
fi


# =============================================================================
# IF FOUND A STORAGE *FILE*, LET'S SEE WHAT WE SHOULD DO
# -----------------------------------------------------------------------------

if [[ -n $CurrentStorageFile ]]; then
  
  # Detect storage file format
  StorageFileImgFormat=$(qemu-img info "$CurrentStorageFile" | awk '/file format:/ {print $3}')
  
  # Give the option of converting img file to LVM
  Print "Guest '$VirtGuestName' is using '$CurrentStorageFile' as a raw storage file"
  Prompt "Configure this guest to use new LVM storage? [y/n]"
  
  # Get "virtual size" of img file in bytes; convert to MiB
  StorageFileSize=$(qemu-img info "$CurrentStorageFile" | 
                    awk '/virtual size:/ {printf "%.1f", gensub(/.* \(([0-9]+) bytes\)/, "\\1", 1) / 1024 / 1024}')
  
  # Notify
  Print "To replace '$CurrentStorageFile' with LVM storage, a new logical volume of size '${StorageFileSize}M' must be created"
  echo
  
  # Compare needed size to space available in volgroups
  Print "Inspecting LVM volume groups ..."
  vgs --noheadings --nosuffix --units m -o vg_name,vg_free |
    awk -v StorageSize=$StorageFileSize '
      $2 >= StorageSize {printf "  ✔  VG \"%s\" appears to have enough space\n", $1}
      $2 <  StorageSize {printf "  ✖  VG \"%s\" does not have enough space\n", $1}'
  echo
  
  # Gather data for creating new LV
  Print "In which volume group should the new logical volume be created?"
  read -p "> " VolGroup
  Print "What name should the new logical volume be given?"
  Print "[ press Enter to use the guest name '$VirtGuestName' ]"
  read -p "> " LogVol
  [[ -z $LogVol ]] && LogVol=$VirtGuestName
  Print "What size should the new logical volume have? (Use size suffixes as in lvcreate)"
  Print "[ press Enter to use autodetected size of ${StorageFileSize}M ]"
  read -p "> " LogVolSize
  [[ -z $LogVolSize ]] && LogVolSize=${StorageFileSize}M
  
  # Create new LV and abort if any errors
  Print "The following command will be attempted:"
  echo "  'lvcreate -L $LogVolSize -n $LogVol $VolGroup'"
  Prompt "Continue? [y/n]"
  
  if ! lvcreate -L $LogVolSize -n $LogVol $VolGroup; then
    Print "Error: lvcreate command failed"
    echo Aborting
    exit 113  #FIXME: exit code?
  fi
  
  # Ensure guest is shut down before doing anything else
  Print "Created logical volume ... now must ensure guest is not running ..."
  Wait_Shutdown $VirtGuestName
  
  # Get fresh xml without all the transitory nonsense present in a running guest
  virsh dumpxml $VirtGuestName >$XML
  echo
  
  # Time to copy image file to new logvol
  CurrentStorageDisk=/dev/$VolGroup/$LogVol
  Print "Will copy '$CurrentStorageFile' img file data to new logvol '$CurrentStorageDisk', leaving img file intact ..."
  nice qemu-img convert -p -O raw "$CurrentStorageFile" $CurrentStorageDisk
  echo
  
  # Time to tweak the guest xml, so a little communication first
  Print "Modifying guest '$VirtGuestName' to use new LVM storage in place of old image file ..."
  XML_bak=$(mktemp)
  cp -a $XML $XML_bak
  Print "(In case things go bad: Backup of guest xml definitions saved to: $XML_bak)"
  
  # Get line number for line containing "source file=" declaration
  linenum=$(grep -n "<source file='$CurrentStorageFile'" $XML | cut -d: -f1)
  # Grab the identation for that line as well
  indent=$(sed "${linenum}q;d" $XML | cut -d\< -f1)
  # Change "source file=" declaration to new "source dev="
  sed -i "${linenum}s,file='$CurrentStorageFile,dev='$CurrentStorageDisk," $XML
  # Change "disk type=" declaration to block
  sed -ri "$((linenum-4)),$((linenum-1))s/^(${indent%  }<disk .*type=)'file'/\1'block'/" $XML
  # Change "driver type=" declaration to raw
  sed -ri "$((linenum-3)),$((linenum-1))s/^($indent<driver .*type=)'[[:alnum:]]+'/\1'raw'/" $XML
  # Kill and redefine guest
  virsh undefine $VirtGuestName
  virsh define $XML
  # Save to CurrentStorage var so we can continue on and convert to snapshot
  CurrentStorage=$CurrentStorageDisk
fi


# =============================================================================
# LVM STORAGE PRESENT, SO IT'S TIME TO MESS WITH SNAPSHOTS
# -----------------------------------------------------------------------------

# Save details about guest's current storage to variables
unset LVM2_ORIGIN LVM2_LV_PATH  # These are the 2 variables set by the following:
eval $(lvs --nameprefixes --noheadings -o lv_path,origin $CurrentStorage)

# Is LVM storage a snapshot LV or just an LV?
if [[ -n $LVM2_ORIGIN ]]; then  # If CurrentStorage has an origin, it's a snapshot
  # If current storage is a snapshot, let's see if we need to merge it or recreate it
  
  # Set origin devpath and roll with that
  OriginLV=${LVM2_LV_PATH%/*}/$LVM2_ORIGIN
  SnapshotLV=$LVM2_LV_PATH
  
  if [[ $MergeSnapshot == true ]]; then  # $MergeSnapshot set via cmdline args
    # If we're doing a merge ...
    Print "This will wait for '$VirtGuestName' to shut down and then merge the snapshot '$SnapshotLV' back into its origin '$OriginLV'"
    Print "To be clear, this could take a while to finish and will leave the guest's original storage irrevocably altered"
    Prompt "Continue? [y/n]"
    # Need to shutdown guest before merging
    Wait_Shutdown $VirtGuestName
    # Merge time
    lvconvert --merge $SnapshotLV
  fi

  # These 2 if blocks (above and below) are separate to allow using --merge and --revert simultaneously
  
  if [[ $RevertToOrigin == true ]]; then  # $RevertToOrigin set via cmdline args
    # If we're getting rid of snapshots and going back to original lv
    Print "THIS WILL DESTROY GUEST '$VirtGuestName' AND RE-CONFIGURE IT TO USE NON-SNAPSHOTTED LVM STORAGE"
    Prompt "Continue? [y/n]"
    # Kill guest as quickly as possible, since we're reverting to origin anyway
    Wait_Destroy $VirtGuestName
    # Kill snapshot lv
    Remove_Snapshot $SnapshotLV
    
    # Get fresh xml without all the transitory nonsense present in a running guest
    virsh dumpxml $VirtGuestName >$XML
    
    # Change guest to use origin storage
    sed -i "/source dev='${CurrentStorage////\\/}'/s,$CurrentStorage,$OriginLV," $XML
    virsh undefine $VirtGuestName
    virsh define $XML
    
    # Start guest
    echo -e "\nStarting guest '$VirtGuestName' using original non-snapshot LVM storage ..."
    virsh start $VirtGuestName &>/dev/null
    
    # Finished
    Print DONE
    exit
  fi
   
  if [[ $MergeSnapshot != true ]]; then
    # If not doing a merge, it's time to destroy the snapshot
    Print "THIS WILL DESTROY GUEST '$VirtGuestName' AND RE-CREATE ITS SNAPSHOT"
    Prompt "Continue? [y/n]"
    # Kill guest as quickly as possible, since we're resetting it anyway
    Wait_Destroy $VirtGuestName
    # Kill snapshot lv
    Remove_Snapshot $SnapshotLV
  fi
  
else
  # If current storage is NOT a snapshot, offer to convert it
  
  OriginLV=$LVM2_LV_PATH
  SnapshotLV=$LVM2_LV_PATH-snap
  
  Print "Storage '$CurrentStorage' for guest '$VirtGuestName' is not a snapshot LV"
  Prompt "Would you like to configure this guest to use a newly-created snapshot? [y/n]"
  # Need to shutdown guest gracefully, since not using snapshot yet
  Wait_Shutdown $VirtGuestName
  
  # Get fresh xml without all the transitory nonsense present in a running guest
  virsh dumpxml $VirtGuestName >$XML
  
  # Change guest to use snapshot storage
  sed -i "/source dev='${CurrentStorage////\\/}'/s,$CurrentStorage,$SnapshotLV," $XML
  virsh undefine $VirtGuestName
  virsh define $XML
fi


# Create snapshot
echo -e "\nCreating fresh snapshot '$SnapshotLV' of origin '$OriginLV' ..."
lvcreate -s $OriginLV -L $SnapshotCOWSize -n $SnapshotLV

# Start guest
echo -e "\nStarting new instance of guest '$VirtGuestName' using new snapshot storage ..."
virsh start $VirtGuestName &>/dev/null

Print DONE
