#!/bin/bash
# loopcapture-stack v0.2 last mod 2016/05/24
# Latest version at <http://github.com/ryran/b19scripts>
# Copyright 2016 Ryan Sawhill Aroha <rsaw@redhat.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#    General Public License <gnu.org/licenses/gpl.html> for more details.
#-------------------------------------------------------------------------------

pzero=loopcapture-stack
version=$(sed '2q;d' ${0})

# Set defaults, allowing environment to override
: ${cmdList:="httpd,httpd.worker"}
: ${loopCount:="20"}
: ${sleepInt:="20s"}

show_help() {
    cat <<EOF
Usage: ${pzero} [-c CMDLIST] [OPTIONS]

Use gstack/pstack to capture thread-dumps of any PIDs matching CMDLIST
By default, there will be 20 iterations 20 seconds apart
Note that ps and top output will also be captured

OPTIONS:

  -c, --cmd CMDLIST   Specify CMDLIST on which to match using 'ps -C'
                      (so commas are allowed)
                      Default: 'httpd,httpd.worker'

  -n, --count LOOPCOUNT   Number of times to capture stack
                          Default: '20'

  -i, --int SLEEPINTERVAL   How long to sleep between capture loops
                            Default: '20s'

  -g, --graburl URL   Download URL w/curl (to file) at beginning of each loop
                      E.g., use with http server-status pages

  -o, --outputdir DIR   Specify output directory to save files -- note that
                        multiple filenames starting with 'pstack-' will created
                        Default: '\$(mktemp -td pstack.XXX)' (some tempdir)

LICENSE / DISCLAIMER:

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  General Public License <gnu.org/licenses/gpl.html> for more details.

Version info: ${version:2}
For issues & questions, see: https://github.com/ryran/b19scripts/issues
EOF
    exit
}

parse_positional_params() {
    until [[ ${1} == -- ]]; do
        case "${1}" in
            -h|--help)       show_help;;
            -c|--cmd)        cmdList=${2}; shift;;
            -n|--count)      loopCount=${2}; shift;;
            -i|--int)        sleepInt=${2}; shift;;
            -g|--graburl)    grabUrl=${2}; shift;;
            -o|--outputdir)  outputDir=${2}; shift;;
        esac
        shift
    done
    shift
}

# Set getopt options
shortOpts="hc:n:i:g:o:"
longOpts="help,cmd:,count:,int:,graburl:,outputdir:"

# Check for bad args
getopt -Q --name=${pzero} -o ${shortOpts} -l ${longOpts} -- "${@}" || show_help

# Parse args proper-like and set variables appropriately
parse_positional_params $(getopt -u --name=${pzero} -o ${shortOpts} -l ${longOpts} -- "${@}")

# Create tempdir if needed
[[ -n ${outputDir} ]] || outputDir=$(mktemp -td pstack.XXX)

# Check for critical errors
if ! command -v pstack >/dev/null && ! command -v gstack >/dev/null; then
    echo "ERR: Missing pstack/gstack command"
    echo "Install gdb"
    exit 1
elif ! ps -C "${cmdList}" >/dev/null; then
    echo "ERR: Invalid CMDLIST as specified by '--cmd CMDLIST'; no matches"
    echo "See '-C' option in ps(1) man page"
    exit 1
elif ! grep -qs '^[0-9]\+$' <<<"${loopCount}"; then
    echo "ERR: Invalid LOOPCOUNT as specified by '--count LOOPCOUNT'"
    echo "Must be a number"
    exit 1
elif ! egrep -qs '^(\.[0-9]+|[0-9]+\.?[0-9]*)[smhd]?$' <<<"${sleepInt}"; then
    echo "ERR: Invalid SLEEPINTERVAL as specified by '--int SLEEPINTERVAL'"
    echo "See sleep(1) man page"
    exit 1
elif [[ -n ${grabUrl} ]] && ! curl -Lkso /dev/null "${grabUrl}"; then
    echo "ERR: Invalid or non-responsive URL as specified by '--graburl URL'"
    echo "This command failed: 'curl -Lkso /dev/null \"${grabUrl}\""
    exit 1
elif [[ ! -d ${outputDir} || ! -w ${outputDir} || ! -x ${outputDir} ]]; then
    echo "ERR: Invalid/non-writable DIR as specified by '--outputdir DIR'"
    exit 1
fi >&2

# GET TO WORK
echo "${pzero}: Saving output to '${outputDir}'"

for y in $(seq 1 ${loopCount}); do
    
    echo "Begin loop ${y} of ${loopCount}"
    prefix="${outputDir}/pstack-$(printf '%02d' ${y})-"
    
    [[ -n ${grabUrl} ]] && curl -Lkso "${prefix}graburl" "${grabUrl}" &
    ps aux >"${prefix}psaux" &
    ps auxm >"${prefix}psauxm" &
    top -bn1 >"${prefix}top" &
    
    pids=$(ps -C "${cmdList}" --noheader -o pid)
    if [[ -z ${pids} ]]; then
        echo "ps CMDLIST ('${cmdList}') didn't match any processes during this loop" >&2
    else
        for pid in ${pids}; do
            {
            echo "Date: $(date)"
            echo "    PID: ${pid}"
            pstack ${pid}
            } &> "${prefix}pid${pid}.pstack" &
        done
    fi
    
    echo -n "Waiting for background tasks to finish ... "
    wait
    echo "Done."
    
    if [[ ${y} -lt ${loopCount} ]]; then
        echo "  Sleeping ${sleepInt}" >&2
        sleep ${sleepInt}
    fi

done

echo "FINISHED."
echo "Inspect files in '${outputDir}'"
