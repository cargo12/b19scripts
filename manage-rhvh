#!/bin/bash
# Copyright 2017 Ryan Sawhill Aroha <rsaw@redhat.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#    General Public License <gnu.org/licenses/gpl.html> for more details.

set -e

# The RHVM env variable should be FQDN of RHVM
# Default:
: ${RHVM:="rhvm.$(dnsdomainname)"}

# The RHVM admin user
# Default:
: ${RHVM_USER:="admin@internal"}

# Validate optional integer variables used in loop_wait()
[[ ${sleep} =~ ^[0-9]+$ ]] || unset sleep
[[ ${maxcount} =~ ^[0-9]+$ ]] || unset maxcount

i_am_rhvm() {
	[[ $(hostname) == ${RHVM} ]]
}

rewrite_ovirtshell_cfg() {
	# I found that my ~/.ovirtshellrc was getting randomly truncated
	# ...by ovirt-shell, presumably. Re-writing it out takes care of that.
	cat > ~/.ovirtshellrc <<-EOF
		[cli]
		autoconnect = True
		autopage = False
		[ovirt-shell]
		username = ${RHVM_USER}
		renew_session = False
		timeout = None
		extended_prompt = False
		url = https://${RHVM}/ovirt-engine/api
		insecure = False
		kerberos = False
		filter = False
		session_timeout = None
		ca_file = $(echo ~/.rhvm.crt)
		dont_validate_cert_chain = False
		key_file = None
		password = $(< ~/.rhvm.passwd)
		cert_file = None
	EOF
}

wait_for_api_server() {
	local cert="http://${RHVM}/ovirt-engine/services/pki-resource?resource=ca-certificate&format=X509-PEM-CA"
	echo -n "Waiting for RHVM API server ... "
	until curl -s ${cert} | openssl x509 &>/dev/null; do
		sleep 10
	done
	echo "✔ READY"
	curl -so ~/.rhvm.crt ${cert}
}

get_state() {
	local objtype=${1} name=${2} out
	if ! out=$(ovirt-shell -E "show ${objtype} ${name}" 2>/dev/null); then
		echo "Error querying RHVM for ${objtype} details! Aborting!" >&2
		return 1
	fi
	awk '/^status-state +: / {print $NF}' <<<"${out}"
}

get_list() {
	local objtype=${1} out
	echo "Getting list of ${objtype}" >&2
	if ! out=$(ovirt-shell -E "list ${objtype}" 2>/dev/null); then
		echo "Error querying RHVM for list of ${objtype}! Aborting!" >&2
		return 1
	fi
	awk '$1=="name" {print $3}' <<<"${out}"
}

loop_wait() {
	local sleep=${sleep:-10} count=1 maxcount=${maxcount:-36}
	local objtype=${1} name=${2} desiredState=${3#*=} action=${4#*=}
	sleep ${sleep}
	until [[ $(get_state ${objtype} ${name}) == ${desiredState} ]]; do
		if (( count++ == maxcount )); then
			echo "  EXCEPTION: Something went wrong because ${objtype} still hasn't reached ${desiredState} state after $((sleep*maxcount)) seconds!"
			return 1
		fi
		echo "  Still waiting for ${objtype^^} ..."
		if [[ ${action} ]]; then
			ovirt-shell -E "action ${objtype} ${name} ${action}" &>/dev/null || :
		fi
		sleep ${sleep}
	done
	echo "  ✔ DONE"
}

shutdown_vm() {
	local vmName=${1} hostid hostid_name
	echo "Checking state of ${vmName} VM"
	if [[ $(get_state vm ${vmName}) == down ]]; then
		echo "  ✔ VM already down"
		return
	fi
	if ! i_am_rhvm; then
		hostid=$(ovirt-shell -E "show vm ${vmName}" | awk '$1=="host-id" {print $3}')
		hostid_name=$(ovirt-shell -E "show host ${hostid}" | awk '$1=="name" {print $3}')
		if [[ ${hostid_name} != $(hostname) ]]; then
			echo "  ✔ VM not running on this host"
			return
		fi
	fi
	echo "Shutting down ${vmName} VM"
	ovirt-shell -E "action vm ${vmName} shutdown" &>/dev/null || :
	loop_wait vm ${vmName} state=down
}

enable_maintenance() {
	local rhvh=${1}
	echo "Checking state of ${rhvh} host"
	if [[ $(get_state host ${rhvh}) == maintenance ]]; then
		echo "  ✔ Host already in maintenance mode"
		return
	fi
	echo "Putting ${rhvh} host into maintenance mode"
	ovirt-shell -E "action host ${rhvh} deactivate" &>/dev/null || :
	loop_wait host ${rhvh} state=maintenance action=deactivate
}

activate_rhvh() {
	local rhvh=${1}
	echo "Checking state of ${rhvh} host"
	if [[ $(get_state host ${rhvh}) == up ]]; then
		echo "  ✔ Host already up"
		return
	fi
	echo "Bringing ${rhvh} host out of maintenance mode"
	ovirt-shell -E "action host ${rhvh} activate" &>/dev/null || :
	loop_wait host ${rhvh} state=up action=activate
}

wait_for_datacenter() {
	local dc=${1}
	echo "Checking state of ${dc} datacenter"
	if [[ $(get_state datacenter ${dc}) == up ]]; then
		echo "  ✔ Datacenter already up"
		return
	fi
	echo "Waiting for ${dc} datacenter to come up"
	loop_wait datacenter ${dc} state=up
}

start_vm() {
	local vmName=${1}
	echo "Checking state of ${vmName} VM"
	if [[ $(get_state vm ${vmName}) == up ]]; then
		echo "  ✔ VM already up"
		return
	fi
	echo "Starting ${vmName} VM"
	ovirt-shell -E "action vm ${vmName} start" &>/dev/null || :
	loop_wait vm ${vmName} state=up action=start
}

get_vms() {
	local out vm vms=
	out=$(get_list vms) || return 1
	if [[ ${MANAGE_VMS} ]]; then
		for vm in ${MANAGE_VMS}; do
			if grep -qs "^${vm}$" <<<"${out}"; then
				vms+="${vm} "
			else
				echo "Unknown VM '${vm}'" >&2
				exit 1
			fi
		done
		# Return failure if none of the specified VMs exist
		[[ ${vms} ]] && echo "${vms}" || return 1
	else
		echo "${out}"
	fi
}

get_hosts() {
	local out host hosts=
	out=$(get_list hosts) || return 1
	i_am_rhvm || MANAGE_HOSTS=$(hostname)
	if [[ ${MANAGE_HOSTS} ]]; then
		for host in ${MANAGE_HOSTS}; do
			if grep -qs "^${host}$" <<<"${out}"; then
				hosts+="${host} "
			else
				echo "Unknown RHV host '${host}'" >&2
			fi
		done
		# Return failure if none of the specified hosts exist
		[[ ${hosts} ]] && echo "${hosts}" || return 1
	else
		echo "${out}"
	fi
}

get_dcs() {
	local out dc dcs=
	out=$(get_list datacenters) || return 1
	if [[ ${MANAGE_DCS} ]]; then
		for dc in ${MANAGE_DCS}; do
			if grep -qs "^${dc}$" <<<"${out}"; then
				dcs+="${dc} "
			else
				echo "Unknown datacenter '${dc}'" >&2
			fi
		done
		echo "${dcs}"
	else
		echo "${out}"
	fi
}

activate() {
	local daemon=${1}
	[[ ${daemon} ]] && rguard -1
	wait_for_api_server
	rewrite_ovirtshell_cfg
	for host in $(get_hosts); do
		activate_rhvh ${host}
	done
	for dc in $(get_dcs); do
		wait_for_datacenter ${dc}
	done
	for vm in $(get_vms); do
		start_vm ${vm}
	done
	echo "✔ DONE ACTIVATING!"
}

deactivate() {
	local daemon=${1}
	if ! ping -c2 -W5 ${RHVM} &>/dev/null; then
		echo "Skipping deactivation due to RHVM not responding to pings"
		return
	fi
	rewrite_ovirtshell_cfg
	for vm in $(get_vms); do
		shutdown_vm ${vm}
	done
	for host in $(get_hosts); do
		enable_maintenance ${host}
	done
	if [[ ${daemon} ]] && i_am_rhvm; then
		echo "Sleeping for 1m to give hosts a head-start"; sleep 1m
	fi
	echo "✔ DONE DEACTIVATING!"
	[[ ${daemon} ]] && rguard -0
	exit
}

main() {
	case ${1} in
		activate|deactivate)
			${1}
			exit
			;;
		daemon)
			if ! journalctl -u systemd-logind -n1 >/dev/null; then
				echo "Error querying journal (perms?); aborting activate"
				exit 1
			fi
			trap 'echo Deactivating due to receipt of SIGINT/SIGTERM; deactivate daemon' INT TERM
			activate daemon
			echo "Waiting for systemd-logind to report 'Power key pressed' event ..."
			journalctl -fu systemd-logind | grep -q "Power key pressed"
			echo "  ✔ Power key pressed"
			deactivate daemon
			;;
		*)
			cat >&2 <<-EOF
				Usage: ${0##*/} activate|deactivate|daemon
				
				activate:
				  1) From RHVM, activate all RHV hosts (or all hosts present in "MANAGE_HOSTS"
				     environment variable).
				     From a RHV host, activate only that host.
				  2) Wait for all datacenters (or all datacenters in "MANAGE_DCS" environment
				     variable) to become active.
				  3) Start all VMs (or all VMs in "MANAGE_VMS" environment variable).
				  
				deactivate:
				  1) From RHVM, gracefully shutdown all VMs (or all VMs in "MANAGE_VMS"
				     environment variable).
				     From a RHV host, gracefully shutdown all VMs running on that host. (This
				     obviously assumes environments where migration has not been configured.)
				  2) From RHVM, put all RHV hosts (or all hosts present in "MANAGE_HOSTS"
				     environment variable) into maintenance mode.
				     From a RHV host, put only that host into maintenance mode.
				
				daemon:
				  1) Run "rguard -1" to configure systemd to disable shutdown/reboot.
				  2) Run "activate" (above).
				  3) Stay resident, waiting for systemd-logind to report "Power key pressed"
				     journal event (as triggered by an ACPI shutdown).
				  4) Run "deactivate" (above).
				  5) Run "rguard -0" to unblock shutdown/reboot.
				  
				  The daemon mode requires reboot-guard (https://github.com/ryran/reboot-guard)
				  to block and unblock shutdown, so ensure that is installed.
				
				SETUP / ENVIRONMENT VARIABLES:
				  * Set "RHVM" variable to FQDN of the RHVM; default: "rhvm.\$(dnsdomainname)"
				  * Set "RHVM_USER" as desired; default: "admin@internal"
				  * Prior to execution, save password for RHVM_USER to: ~/.rhvm.passwd
				  * To keep activate/deactivate from operating on any VMs, set: MANAGE_VMS=" "
				    The same applies to the MANAGE_HOSTS and MANAGE_DCS variables.
			EOF
			exit 1
	esac
}

main ${@}
exit ${?}
