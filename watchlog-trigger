#!/usr/bin/python
# -*- coding: utf-8 -*-
# Latest version at <http://github.com/ryran/b19scripts>
# Copyright 2016 Ryan Sawhill Aroha <rsaw@redhat.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#    General Public License <gnu.org/licenses/gpl.html> for more details.
#-------------------------------------------------------------------------------

from __future__ import print_function
from textwrap import dedent
import argparse
from subprocess import call, check_call, CalledProcessError
from tempfile import NamedTemporaryFile
from os import remove, getpid
from sys import exit
import atexit

opts = None
prog = 'watchlog-trigger'
versionNumber = '0.4'
versionDate = '2016/05/25'
description = dedent("""
    Block watching FILE until it is modified (potentially requiring a line matching
    REGEX). Once watching unblocks, execute COMMAND (if specified) and exit. 
    This requires the inotifywait command from the inotify-tools package (EPEL).
    """)
epilog = dedent("""
    LICENSE / DISCLAIMER:
    
      This program is free software: you can redistribute it and/or modify
      it under the terms of the GNU General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
      
      This program is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
      General Public License <gnu.org/licenses/gpl.html> for more details.
    
    Version info: {0} v{1} last mod {2}
    For issues & questions, see: https://github.com/ryran/b19scripts/issues
    """.format(prog, versionNumber, versionDate))

def parse_cmdline():
    p = argparse.ArgumentParser(
        prog=prog,
        description=description,
        add_help=True,
        epilog=epilog,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    p.add_argument('-f', '--file', dest='watchFile', metavar='FILE', required=True, help="Specify [log] file to watch with 'tail -Fn0 FILE'. This file *must exist* and be readable when {0} starts.".format(prog))
    p.add_argument('-r', '--regex', dest='watchRegex', metavar='REGEX', help="Specify line-based grep basic regular expression to watch for in FILE. {0} will block until a new line matching REGEX shows up in FILE. Protect REGEX from your shell with quotes; it will be passed to grep without validation so test it ahead of time. Omit this option to simply block until FILE is modified.".format(prog))
    p.add_argument('-c', '--cmd', dest='execCmd', metavar='COMMAND', help="Specify command(s) to execute after the watching of FILE unblocks. Protect COMMAND from your shell with quotes; it will be passed to shell without validation so test it ahead of time and be careful. Omit this option to simply exit after watching of FILE unblocks.")
    return p.parse_args()

def logger(message, pri="daemon.info", tag=prog):
    message += " -- file('{0}')".format(opts.watchFile)
    if opts.watchRegex is not None:
        message += ", regex('{0}')".format(opts.watchRegex)
    loggerCmd = ['logger', '-s', '-p', pri, '-t', tag, message]
    call(loggerCmd)

def check_have_inotifywait():
    try:
        check_call('command -v inotifywait >/dev/null', shell=True)
    except:
        print("Missing the inotifywait command (from the inotify-tools package)".format(prog))
        print("In RHEL, this can be installed from EPEL (https://fedoraproject.org/wiki/EPEL)")
        exit(1)

def exit_handler():
    try:
        remove(opts.triggerFile)
    except:
        pass
    
def main():
    global opts
    opts = parse_cmdline()
    # Exit cleanly (early) if missing inotifywait
    check_have_inotifywait()
    if opts.watchRegex is None:
        # If no regex, we can use inotify directly on watch file
        opts.triggerFile = opts.watchFile
        unblockMessage = "FILE MODIFIED! Unblocking!"
    else:
        # If regex, we need to use tail|grep and inotify on output from that, so create tempfile
        opts.triggerFile = NamedTemporaryFile(dir='/dev/shm').name
        atexit.register(exit_handler)
        # Execute tail in background subshell
        cmd =  "(tail --pid {0} -Fn0 {1} |".format(getpid(), opts.watchFile)
        cmd += " grep --line-buffered '{0}' >>{1}) &".format(opts.watchRegex, opts.triggerFile)
        call(cmd, shell=True)
        unblockMessage = "MATCH FOUND! Unblocking!"
    # Log start
    logger("Initiating watch")
    # Execute inotifywait, quiting if it fails for some reason
    try:
        check_call(['inotifywait', '-e', 'modify', opts.triggerFile])
    except CalledProcessError:
        logger("inotifywait command returned error! Aborting!", "daemon.err")
        exit(1)
    # If we get here, we hope inotifywait has cleanly exited due to match found
    # Log appropriate unblockMessage (set above)
    logger(unblockMessage, "daemon.warning")
    # Execute command if necessary
    if opts.execCmd:
        logger('Executing cmd: """{0}"""'.format(opts.execCmd), "daemon.warning")
        # Execute our user-requested command(s)
        call(opts.execCmd, shell=True)
    # Quit
    logger("Exiting", "daemon.warning")

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        logger("User cancelled watch", "daemon.warning")
